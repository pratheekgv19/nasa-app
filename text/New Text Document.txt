import { screen,render, fireEvent } from "@testing-library/react";
import AsteroidInput from "./AsteroidInput";

describe("rendering form", () => {

    test("headers", () => {
        render(<AsteroidInput posts={[]} />)
        const headerElm = screen.getByRole("heading", {name: "Nasa App",})
        expect(headerElm).toBeInTheDocument()
      })

    test("input type and placeholder",()=>{
      render(<AsteroidInput posts={[]} />)
        const inpulElem=screen.getByTestId("input")
        expect(inpulElem).toHaveAttribute("type","text")

        const inputbox = screen.getByRole("textbox");
        expect(inputbox).toBeInTheDocument();

        const placeholderText = screen.getByPlaceholderText("Enter Asteroid ID");
        expect(placeholderText).toBeInTheDocument();
    })
    
    test("submit button and random asteroid button",()=>{
      render(<AsteroidInput posts={[]} />)
        const submitButton=screen.getByText("Submit")
        expect(submitButton).toBeInTheDocument();

      const randomElem=screen.getByText(/random asteroid/i)
      expect(randomElem).toBeInTheDocument();
    })

    test("disabled button",()=>{
      render(<AsteroidInput posts={[]} />)
       const disabledButton = screen.getByRole("button", {name: "Submit",});
       expect(disabledButton).toHaveAttribute("disabled")
      })

      test("button enabled for non-empty",()=>{
        render(<AsteroidInput posts={[]} />)
     
        const inputElem=screen.getByTestId("input")
        fireEvent.change(inputElem,{target:{value:'3542519'}})
     
        const enabledBtn=screen.getByRole("button",{name:"Submit"})
        expect(enabledBtn).not.toBeDisabled()
       })

       it("should not allow the user to submit without entering an ID", () => {
        render(<AsteroidInput posts={[]} />);
        const submitButton = screen.getByTestId("submit");
        fireEvent.click(submitButton);
        expect(screen.queryByText("Asteroid Details:")).toBeNull();
      });
    //   test.skip("form submission with valid input", async () => {
    //  render(<AsteroidInput posts={[]} />)
    //     const inputElem = screen.getByTestId("input");
    //     fireEvent.change(inputElem, { target: { value: "3542519" } });
    //     const submitbutton = screen.getByRole("button", {
    //       name: "Submit",
    //     });
    //     fireEvent.click(submitbutton);
      
    //     await screen.findByRole("heading", {
    //       name: "Asteroid Details:",
    //     });
      
    //     const asteroidDetails = screen.getByText(/name:/i);
    //     expect(asteroidDetails).toBeInTheDocument();
    //   }); 
})

  describe("asteroid details after entering an id and submitting",()=>{
    test("should show the asteroid details after submitting with a valid ID", async () => {
      const mockData = {
        name: "Mock Asteroid",
        nasa_jpl_url: "https://www.nasa.gov",
        is_potentially_hazardous_asteroid: true,
      };
      global.fetch = jest.fn().mockImplementation(() =>
        Promise.resolve({
          json: () => Promise.resolve(mockData),
        })
      );
      render(<AsteroidInput posts={[]} />);
      const input = screen.getByTestId("input");
      const submitButton = screen.getByTestId("submit");
      fireEvent.change(input, { target: { value: "1234" } });
      fireEvent.click(submitButton);
      expect(await screen.findByText("Asteroid Details:")).toBeInTheDocument();
      expect(screen.getByTestId("name")).toHaveTextContent("Mock Asteroid");
      expect(screen.getByTestId("url")).toHaveTextContent("https://www.nasa.gov");
      expect(screen.getByTestId("isHazardous")).toHaveTextContent("Is Potentially Hazardous Asteroid:Yes");
    });
  })


describe("random Asteroid",()=>{
  
  it("should show a random asteroid details after clicking the button", async () => {
    const mockData = {
      name: "Mock Random Asteroid",
      nasa_jpl_url: "https://www.nasa.gov",
      is_potentially_hazardous_asteroid: false,
    };
    global.fetch = jest.fn().mockImplementation((url) => {
      if (url.includes("browse")) {
        return Promise.resolve({
          json: () =>
            Promise.resolve({
              near_earth_objects: [{ id: "5678" }, { id: "9012" }],
            }),
        });
      } else {
        return Promise.resolve({
          json: () => Promise.resolve(mockData),
        });
      }
    });
    render(<AsteroidInput posts={[]} />);
    const randomButton = screen.getByText("Random Asteroid");
    fireEvent.click(randomButton);
    expect(await screen.findByText("Asteroid Details:")).toBeInTheDocument();
    expect(screen.getByTestId("name")).toHaveTextContent("Mock Random Asteroid");
    expect(screen.getByTestId("url")).toHaveTextContent("https://www.nasa.gov");
    expect(screen.getByTestId("isHazardous")).toHaveTextContent(
      "Is Potentially Hazardous Asteroid:No"
    );
})
})

// describe("asteroid details",()=>{
//   test('renders asteroid details for each post', () => {
//     const posts = [  
//           {
//             Name: 'Paris',    
//             Nasa_JPL_URL:'france',
//             Is_Potentially_Hazardous_Asteroid: 67391582,
//       },
//       {
//         Name: 'Paris',    
//         Nasa_JPL_URL:'france',
//         Is_Potentially_Hazardous_Asteroid: 67391582,
//   },
     
//     ];
//     render(<AsteroidInput posts={posts} />);
//   const submitBtn=screen.getByRole("button",{
//     name:"Submit"
//   })
//   fireEvent.click(submitBtn)
//     const Name = screen.getAllByTestId('name');
//     expect(Name).toHaveLength(2);
//     expect(Name[0]).toHaveTextContent('Name: Paris');
//     expect(Name[1]).toHaveTextContent('Name: Tokyo');
  
//     const Nasa_JPL_URL = screen.getAllByTestId('population');
//     expect(Nasa_JPL_URL).toHaveLength(2);
//     expect(Nasa_JPL_URL[0]).toHaveTextContent('Population:67391582');
//     expect(Nasa_JPL_URL[1]).toHaveTextContent('Population:126150000');
  
//     const    Is_Potentially_Hazardous_Asteroid = screen.getAllByTestId('latitude');
//     expect(Is_Potentially_Hazardous_Asteroid).toHaveLength(2);

//     expect(Is_Potentially_Hazardous_Asteroid[0]).toHaveTextContent('Latitude:48.8566');
//     expect(Is_Potentially_Hazardous_Asteroid[1]).toHaveTextContent('Latitude:35.6762');
    
//     const longitudes = screen.getAllByTestId('longitude');
//     expect(longitudes).toHaveLength(2);
//     expect(longitudes[0]).toHaveTextContent('Longitude:2.3522');
//     expect(longitudes[1]).toHaveTextContent('Longitude:139.6503');
  
//     // const buttons = screen.getAllByRole('button', { name: /random asteroid/i });
//     // expect(buttons).toHaveLength(2);
//     // expect(buttons[0]).toHaveTextContent('Capital Weather');
//     // expect(buttons[1]).toHaveTextContent('Capital Weather');
    
//   });
// })



// describe.skip("asteroid details2",()=>{
//   test('renders asteroid details for each post', () => {
//     const posts = [  
//           {
//             Name:"1865 Cerberus (1971 UA)",  
//             Nasa_JPL_URL:'http://ssd.jpl.nasa.gov/sbdb.cgi?sstr=2001865',
//             Is_Potentially_Hazardous_Asteroid:"No",
//       },
//           {
//             Name: "1943 Anteros (1973 EC)",
//             Nasa_JPL_URL: "http://ssd.jpl.nasa.gov/sbdb.cgi?sstr=2001943",
//             Is_Potentially_Hazardous_Asteroid:"No",
//           }

//     ];
//     render(<AsteroidInput posts={posts} />);
//   const randomButton=screen.getByRole("button",{
//     name:"Random Asteroid"
//   })
//   fireEvent.click(randomButton)
//     const Name = screen.getAllByTestId("name");
//     expect(Name[0]).toHaveTextContent("Name:1865 Cerberus (1971 UA)");
//     expect(Name[1]).toHaveTextContent("Name:1943 Anteros (1973 EC)");
//     expect(Name).toHaveLength(2);
  
//     const Nasa_JPL_URL = screen.getAllByTestId("url");
//     expect(Nasa_JPL_URL).toHaveLength(2);
//     expect(Nasa_JPL_URL[0]).toHaveTextContent("Nasa_JPL_URL:http://ssd.jpl.nasa.gov/sbdb.cgi?sstr=2001865");
//     expect(Nasa_JPL_URL[1]).toHaveTextContent("Nasa_JPL_URL: http://ssd.jpl.nasa.gov/sbdb.cgi?sstr=2001943");
  
//     const  Is_Potentially_Hazardous_Asteroid = screen.getAllByTestId("isHazardous");
//     expect(Is_Potentially_Hazardous_Asteroid[0]).toHaveTextContent("Is_Potentially_Hazardous_Asteroid:No");
//     expect(Is_Potentially_Hazardous_Asteroid[1]).toHaveTextContent("Is_Potentially_Hazardous_Asteroid:No");
//     expect(Is_Potentially_Hazardous_Asteroid).toHaveLength(2);
    
//   });
// })


// describe("rendering form", () => {

//   test("headers", () => {
//       render(<AsteroidInput posts={[]} />)
//       const headerElm = screen.getByRole("heading", {name: "Nasa App",})
//       expect(headerElm).toBeInTheDocument()
//     })

//   test("input type and placeholder",()=>{
//     render(<AsteroidInput posts={[]} />)
//       const inpulElem=screen.getByTestId("input")
//       expect(inpulElem).toHaveAttribute("type","text")

//       const inputbox = screen.getByRole("textbox");
//       expect(inputbox).toBeInTheDocument();

//       const placeholderText = screen.getByPlaceholderText("Enter Asteroid ID");
//       expect(placeholderText).toBeInTheDocument();
//   })
  
//   test("submit button and random asteroid button",()=>{
//     render(<AsteroidInput posts={[]} />)
//       const submitButton=screen.getByText("Submit")
//       expect(submitButton).toBeInTheDocument();

//     const randomElem=screen.getByText(/random asteroid/i)
//     expect(randomElem).toBeInTheDocument();
//   })

//   test("disabled button",()=>{
//     render(<AsteroidInput posts={[]} />)
//      const disabledButton = screen.getByRole("button", {name: "Submit",});
//      expect(disabledButton).toHaveAttribute("disabled")
//     })

//     test("button enabled for non-empty",()=>{
//       render(<AsteroidInput posts={[]} />)
   
//       const inputElem=screen.getByTestId("input")
//       fireEvent.change(inputElem,{target:{value:'3542519'}})
   
//       const enabledBtn=screen.getByRole("button",{name:"Submit"})
//       expect(enabledBtn).not.toBeDisabled()
//      })

//     test.skip("form submission with valid input", async () => {
//       render(<AsteroidInput posts={[]} />)
//       const inputElem = screen.getByTestId("input");
//       fireEvent.change(inputElem, { target: { value: "3542519" } });
//       const submitbutton = screen.getByRole("button", {
//         name: "Submit",
//       });
//       fireEvent.click(submitbutton);
    
//       await screen.findByRole("heading", {
//         name: "Asteroid Details:",
//       });
    
//       const asteroidDetails = screen.getByText(/name:/i);
//       expect(asteroidDetails).toBeInTheDocument();
//     }); 
// })
/*
  test("displays asteroid data when user submits valid asteroid ID", async () => {
    const mockAsteroidData = {
      name: "Asteroid 12345",
      nasa_jpl_url: "https://www.nasa.gov/asteroid-12345",
      is_potentially_hazardous_asteroid: true,
    };

    jest.spyOn(global, "fetch").mockResolvedValue({
      json: () => Promise.resolve(mockAsteroidData),
    } as Response);

    render(<App />);

    const inputField = screen.getByPlaceholderText("Enter Asteroid ID");
    const submitButton = screen.getByText("Submit");

    fireEvent.change(inputField, { target: { value: "12345" } });
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(screen.getByText(mockAsteroidData.name)).toBeInTheDocument();
      expect(
        screen.getByText(`NASA JPL URL: ${mockAsteroidData.nasa_jpl_url}`)
      ).toBeInTheDocument();
      expect(
        screen.getByText("Potentially hazardous: Yes")
      ).toBeInTheDocument();
    });
  });
*/
